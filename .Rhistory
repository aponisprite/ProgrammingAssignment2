z <- matrix(rnorm(100), 100, 100)
z
solve(z)
?solve
z <- matrix(rnorm(100), 10, 10)
z
solve(z)
a <- solve(z)
makeCacheMatrix(z)
# Return the matrix inverse value
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# Declare an empty variable to hold the inverse
m <- NULL
# Declare a set function to hold the matrix "x"
set <- function(y) {
x <<- y
m <<- NULL
}
# Declare a get function to retrieve the cached matrix
get <- function() x
# Declare a function to set the value of m to the inverse of the cached matrix
setinverse <- function(cacheSolve) m <<- cacheSolve
# Return the value of the cached inverse (i.e., "m")
getinverse <- function() m
# A list of the functions contained in this function
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## A function that checks to see if the inverse of the supplied matrix has been calculated
## If yes, return the cached value, if not, calculate the new value
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
# First, use getinverse() to see if the value is already stored
m <- x$getinverse()
# If the value of the inverse is not NULL, then let us know we're using the cached value
# and return the cached value
if(!is.null(m)) {
message("Getting cached inverse of supplied matrix.")
return(m)
}
# We only get here if there was not a cached value
# Set the value of a local variable, data, to the global value of the matrix
# stored in "x"
data <- x$get()
# Calculate the inverse using the built in R function - "solve"
m <- solve(data)
# Use the global defined function "setinverse" to save the matrix's inverse value as m
x$setinverse(m)
# Return the matrix inverse value
m
}
makeCacheMatrix(z)
c <- makeCacheMatrix(z)
c$getinverse
c$m
c$x
c$getinverse()
c$setinverse()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# Declare an empty variable to hold the inverse
m <- NULL
# Declare a set function to hold the matrix "x"
set <- function(y) {
x <<- y
m <<- NULL
}
# Declare a get function to retrieve the cached matrix
get <- function() x
# Declare a function to set the value of m to the inverse of the cached matrix
setinverse <- function(cacheSolve) m <<- cacheSolve()
# Return the value of the cached inverse (i.e., "m")
getinverse <- function() m
# A list of the functions contained in this function
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## A function that checks to see if the inverse of the supplied matrix has been calculated
## If yes, return the cached value, if not, calculate the new value
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
# First, use getinverse() to see if the value is already stored
m <- x$getinverse()
# If the value of the inverse is not NULL, then let us know we're using the cached value
# and return the cached value
if(!is.null(m)) {
message("Getting cached inverse of supplied matrix.")
return(m)
}
# We only get here if there was not a cached value
# Set the value of a local variable, data, to the global value of the matrix
# stored in "x"
data <- x$get()
# Calculate the inverse using the built in R function - "solve"
m <- solve(data)
# Use the global defined function "setinverse" to save the matrix's inverse value as m
x$setinverse(m)
# Return the matrix inverse value
m
}
c$setinverse()
c$setinverse(z)
c$m
c$getinverse
c$getinverse()
a
solve(z)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# Declare an empty variable to hold the inverse
m <- NULL
# Declare a set function to hold the matrix "x"
set <- function(y) {
x <<- y
m <<- NULL
}
# Declare a get function to retrieve the cached matrix
get <- function() x
# Declare a function to set the value of m to the inverse of the cached matrix
setinverse <- function(cacheSolve) m <<- cacheSolve() x
# Return the value of the cached inverse (i.e., "m")
getinverse <- function() m
# A list of the functions contained in this function
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## A function that checks to see if the inverse of the supplied matrix has been calculated
## If yes, return the cached value, if not, calculate the new value
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
# First, use getinverse() to see if the value is already stored
m <- x$getinverse()
# If the value of the inverse is not NULL, then let us know we're using the cached value
# and return the cached value
if(!is.null(m)) {
message("Getting cached inverse of supplied matrix.")
return(m)
}
# We only get here if there was not a cached value
# Set the value of a local variable, data, to the global value of the matrix
# stored in "x"
data <- x$get()
# Calculate the inverse using the built in R function - "solve"
m <- solve(data)
# Use the global defined function "setinverse" to save the matrix's inverse value as m
x$setinverse(m)
# Return the matrix inverse value
m
}
c$setinverse(z)
c$getinverse()
z
z <- matrix(rnorm(25), 5, 5)
z
a <- solve(z)
makeCacheMatrix(z)
y <- makeCacheMatrix(z)
y$getinverse()
y$setinverse()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# Declare an empty variable to hold the inverse
m <- NULL
# Declare a set function to hold the matrix "x"
set <- function(y) {
x <<- y
m <<- NULL
}
# Declare a get function to retrieve the cached matrix
get <- function() x
# Declare a function to set the value of m to the inverse of the cached matrix
setinverse <- function(cacheSolve) m <<- cacheSolve(x)
# Return the value of the cached inverse (i.e., "m")
getinverse <- function() m
# A list of the functions contained in this function
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## A function that checks to see if the inverse of the supplied matrix has been calculated
## If yes, return the cached value, if not, calculate the new value
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
# First, use getinverse() to see if the value is already stored
m <- x$getinverse()
# If the value of the inverse is not NULL, then let us know we're using the cached value
# and return the cached value
if(!is.null(m)) {
message("Getting cached inverse of supplied matrix.")
return(m)
}
# We only get here if there was not a cached value
# Set the value of a local variable, data, to the global value of the matrix
# stored in "x"
data <- x$get()
# Calculate the inverse using the built in R function - "solve"
m <- solve(data)
# Use the global defined function "setinverse" to save the matrix's inverse value as m
x$setinverse(m)
# Return the matrix inverse value
m
}
y$setinverse()
y$get()
y$m
y$x
makeCacheMatrix(z)
y$x
y <- makeCacheMatrix$set(z)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# Declare an empty variable to hold the inverse
m <- NULL
# Declare a set function to hold the matrix "x"
set <- function(y) {
x <<- y
m <<- NULL
}
# Declare a get function to retrieve the cached matrix
get <- function() x
# Declare a function to set the value of m to the inverse of the cached matrix
setinverse <- function(cacheSolve) m <<- cacheSolve(x)
# Return the value of the cached inverse (i.e., "m")
getinverse <- function() m
# A list of the functions contained in this function
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## A function that checks to see if the inverse of the supplied matrix has been calculated
## If yes, return the cached value, if not, calculate the new value
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
# First, use getinverse() to see if the value is already stored
m <- x$getinverse()
# If the value of the inverse is not NULL, then let us know we're using the cached value
# and return the cached value
if(!is.null(m)) {
message("Getting cached inverse of supplied matrix.")
return(m)
}
# We only get here if there was not a cached value
# Set the value of a local variable, data, to the global value of the matrix
# stored in "x"
data <- x$get()
# Calculate the inverse using the built in R function - "solve"
m <- solve(data)
# Use the global defined function "setinverse" to save the matrix's inverse value as m
x$setinverse(m)
# Return the matrix inverse value
m
}
y <- makeCacheMatrix$set(z)
makeCacheMatrix$set(z)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- rnorm(10)
mean(x)
makeVector(x)
y <- makeVector(x)
y <- makeVector$set(x)
y
y$set
y$getmean()
y$setmean()
y$cachemean()
cachemean(y)
mean(x)
y$getmean()
cachemean(x)
cachemean(y)
x <- matrix(rnrom(25),5,5)
x <- matrix(rnorm(25),5,5)
x
y$makeCacheMatrix(x)
makeCacheMatrix(x)
y <- makeCacheMatrix(x)
y$get
y$get()
cacheSolve(y)
y$get(0)
y$get()
y$getinverse()
cacheSolve(y)
cacheSolve(x)
y$getinverse()
x
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# Declare an empty variable to hold the inverse
i <- NULL
# Declare a set function to hold the matrix "x"
set <- function(y) {
x <<- y
i <<- NULL
}
# Declare a get function to retrieve the cached matrix
get <- function() x
# Declare a function to set the value of m to the inverse of the cached matrix
setinverse <- function(cacheSolve) i <<- cacheSolve() x
# Return the value of the cached inverse (i.e., "m")
getinverse <- function() i
# A list of the functions contained in this function
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## A function that checks to see if the inverse of the supplied matrix has been calculated
## If yes, return the cached value, if not, calculate the new value
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
# First, use getinverse() to see if the value is already stored
i <- x$getinverse()
# If the value of the inverse is not NULL, then let us know we're using the cached value
# and return the cached value
if(!is.null(i)) {
message("Getting cached inverse of supplied matrix.")
return(i)
}
# We only get here if there was not a cached value
# Set the value of a local variable, data, to the global value of the matrix
# stored in "x"
data <- x$get()
print data
# Calculate the inverse using the built in R function - "solve"
i <- solve(data)
# Use the global defined function "setinverse" to save the matrix's inverse value as m
x$setinverse(i)
# Return the matrix inverse value
i
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# Declare an empty variable to hold the inverse
i <- NULL
# Declare a set function to hold the matrix "x"
set <- function(y) {
x <<- y
i <<- NULL
}
# Declare a get function to retrieve the cached matrix
get <- function() x
# Declare a function to set the value of m to the inverse of the cached matrix
setinverse <- function(cacheSolve) i <<- cacheSolve() x
# Return the value of the cached inverse (i.e., "m")
getinverse <- function() i
# A list of the functions contained in this function
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## A function that checks to see if the inverse of the supplied matrix has been calculated
## If yes, return the cached value, if not, calculate the new value
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
# First, use getinverse() to see if the value is already stored
i <- x$getinverse()
# If the value of the inverse is not NULL, then let us know we're using the cached value
# and return the cached value
if(!is.null(i)) {
message("Getting cached inverse of supplied matrix.")
return(i)
}
# We only get here if there was not a cached value
# Set the value of a local variable, data, to the global value of the matrix
# stored in "x"
data <- x$get()
print(data)
# Calculate the inverse using the built in R function - "solve"
i <- solve(data)
# Use the global defined function "setinverse" to save the matrix's inverse value as m
x$setinverse(i)
# Return the matrix inverse value
i
}
x
y <- makeCacheMatrix(x)
y$get()
y$set()
y$set(x)
y$get()
y$getinverse()
cacheSolve(y)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# Declare an empty variable to hold the inverse
i <- NULL
# Declare a set function to hold the matrix "x"
set <- function(y) {
x <<- y
i <<- NULL
}
# Declare a get function to retrieve the cached matrix
get <- function() x
# Declare a function to set the value of m to the inverse of the cached matrix
setinverse <- function(cacheSolve) i <<- cacheSolve() x
# Return the value of the cached inverse (i.e., "m")
getinverse <- function() i
# A list of the functions contained in this function
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## A function that checks to see if the inverse of the supplied matrix has been calculated
## If yes, return the cached value, if not, calculate the new value
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
# First, use getinverse() to see if the value is already stored
i <- x$getinverse()
# If the value of the inverse is not NULL, then let us know we're using the cached value
# and return the cached value
if(!is.null(i)) {
message("Getting cached inverse of supplied matrix.")
return(i)
}
# We only get here if there was not a cached value
# Set the value of a local variable, data, to the global value of the matrix
# stored in "x"
data <- x$get()
print(data)
# Calculate the inverse using the built in R function - "solve"
i <- solve(data)
print(i)
# Use the global defined function "setinverse" to save the matrix's inverse value as m
x$setinverse(i)
# Return the matrix inverse value
i
}
y <- makeCacheMatrix(x)
y$get()
cacheSolve(y)
y$setinverse()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# Declare an empty variable to hold the inverse
i <- NULL
# Declare a set function to hold the matrix "x"
set <- function(y) {
x <<- y
i <<- NULL
}
# Declare a get function to retrieve the cached matrix
get <- function() x
# Declare a function to set the value of m to the inverse of the cached matrix
setinverse <- function(solve) i <<- solve
# Return the value of the cached inverse (i.e., "m")
getinverse <- function() i
# A list of the functions contained in this function
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## A function that checks to see if the inverse of the supplied matrix has been calculated
## If yes, return the cached value, if not, calculate the new value
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
# First, use getinverse() to see if the value is already stored
i <- x$getinverse()
# If the value of the inverse is not NULL, then let us know we're using the cached value
# and return the cached value
if(!is.null(i)) {
message("Getting cached inverse of supplied matrix.")
return(i)
}
# We only get here if there was not a cached value
# Set the value of a local variable, data, to the global value of the matrix
# stored in "x"
data <- x$get()
print(data)
# Calculate the inverse using the built in R function - "solve"
i <- solve(data)
print(i)
# Use the global defined function "setinverse" to save the matrix's inverse value as m
x$setinverse(i)
# Return the matrix inverse value
i
}
y
y$get()
y$getinverse()
cacheSolve(y)
y$setinverse()
